Stone Game
1. Alex always wins the game since he goes first he plays optimally. If Alex takes the first pile initially, he can always take the third pile. If he takes the fourth pile initially, he can always take the second pile. At least one of first + third, second + fourth is larger, so he can always win. This is a Minimax problem, now lets change the game so that whenever Lee scores points, it deducts from Alex's score instead. Since Alex plays optimally he will maximazie the score by either consuming the first pile from the piles or by consuming the last pile. Lee's turn then we will find the min number of stones we can get by decreasing the amount of the Alex's score.
2. We will take a 2D Array and save the answer at an index and in case of redundant calls.
3.Tried to do it by hand many times but could not understand the recursion, even thou its similar to other problems I did.
4. public boolean stoneGame(int[] piles) {
        int N = piles.length;
        // dp[i+1][j+1] = the value of the game [piles[i], ..., piles[j]].
        int[][] dp = new int[N+2][N+2];
        for (int size = 1; size <= N; ++size)
            for (int i = 0; i + size <= N; ++i) {
                int j = i + size - 1;
                int parity = (j + i + N) % 2;  // j - i - N; but +x = -x (mod 2)
                if (parity == 1)
                    dp[i+1][j+1] = Math.max(piles[i] + dp[i+2][j+1], piles[j] + dp[i+1][j]);
                else
                    dp[i+1][j+1] = Math.min(-piles[i] + dp[i+2][j+1], -piles[j] + dp[i+1][j]);
            }
        return dp[1][N] > 0;
    }
Space and Time Complexity: O(N2), where N is the number of piles, the space used storing the intermediate results of each subgame.






