Perfect Squares
	1.Given a positive integer N find the perfect square numbers which sum to N. First thing to know is the perfect squares which are 1,4,9,16 what makes them perfect squares is they are multiplied by the same number. For example 1^2 =1, 2^2=4, 3^2=9, 4^2=16. 
If we choose for example number 12 we cant use 4^2 since that is past 12 so we use try 1,4,9. First we try the highest which is 9(3^2) so subtract 12 from 9 we are left with 4,we cant try 9 again so we try the next highest 4(2^2), so 4-4=0 and we used 2 perfect squares.
Next thing we want to do is come up with the recursive formula. We do that by subtracting our perfect squares from n. For example:13
•	If we try 3, then dp(13)=dp(13-3^2)+1=dp(4)+1. The +1keeps track of how many perfect squares we use, 
•	If we try 2, then dp(13)=13-2^2=dp(9)+1
•	If we try 1, then dp(13)=13-1^2=dp(12)+1
So we are left with comparing which is the smallest out of dp(4), dp(9), and dp(12). Hence the minimum. since for every value n, it must come from some value plus a square number. This can be written as:
d[n] = min(d[n - i * i] + 1), where d[n] is the least number of square numbers, and i * i <= n.
dp[0] = 0 
dp[1] = dp[0]+1 = 1
dp[2] = dp[1]+1 = 2
dp[3] = dp[2]+1 = 3
dp[4] = Min{ dp[4-1*1]+1, dp[4-2*2]+1 } = Min{ dp[3]+1, dp[0]+1 } = 1				
dp[5] = Min{ dp[5-1*1]+1, dp[5-2*2]+1 } = Min{ dp[4]+1, dp[1]+1 } = 2				.
dp[13] = Min{ dp[13-1*1]+1, dp[13-2*2]+1, dp[13-3*3]+1 } 
       = Min{ dp[12]+1, dp[9]+1, dp[4]+1 }
2. we use an array,DP array stands for the least number of perfect square numbers for its index.

3. I traced the problem by hand to test the solution multiple times.

4.
Time Complexity: n * sqrt(n) Space: O(n)
public int numSquares(int n) {
    int max = (int) Math.sqrt(n);
 
    int[] dp = new int[n+1];
    Arrays.fill(dp, Integer.MAX_VALUE);
 
    for(int i=1; i<=n; i++){
        for(int j=1; j<=max; j++){
            if(i==j*j){
                dp[i]=1;
            }else if(i>j*j){
                dp[i]=Math.min(dp[i], dp[i-j*j] + 1);
            }
        }
    }
    return dp[n];
}
