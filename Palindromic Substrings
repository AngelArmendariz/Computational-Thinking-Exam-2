Palindromic Substrings 
1.Find how many palindrome substrings you can make from a given String even if they consist of the same character. If one letter, then it is a palindrome. 2 letters they must be the same.3 letters you look at the first and last if they equal then it’s a palindrome. if 4 letters you look at the first and last if they are the same you look at the previous calculation [i+1][j-1] and if it’s true then it’s a palindrome. Make sure you add 1 to the counter when they are true and return the total number of palindromes. (Bottom up method) 
	0[]ja	[1]jb	[2]jc	[3]ja	
[0]ia	T	F	F	F[i+1][j-1]
[1]ib	\	T	F	F
[2]ic	\	\	T	F
[3 ]ia	\	\	\	T
[0][i][0][1] [0][2] [1][2] [1][3] [2][3] [0][3]
Time and Space complexity O(N^2)

2.Make a 2D array using pointers I and J.
3. I traced the problem by hand to test the solution multiple times. Trial and error until finding the pattern 

4. public int countSubstrings(String s) {
    int n = s.length();
    int res = 0;
    boolean[][] dp = new boolean[n][n];
    for (int i = n - 1; i >= 0; i--) {
        for (int j = i; j < n; j++) {
            dp[i][j] = s.charAt(i) == s.charAt(j) && (j - i < 3 || dp[i + 1][j - 1]);
            if(dp[i][j]) ++res;
        }
    }
    return res;
}
